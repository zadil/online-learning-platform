// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: courses.sql

package db

import (
	"context"
	"database/sql"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (title, description, author_id)
VALUES ($1, $2, $3)
RETURNING id, title, description, created_at, updated_at, author_id
`

type CreateCourseParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	AuthorID    sql.NullInt32  `json:"author_id"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.queryRow(ctx, q.createCourseStmt, createCourse, arg.Title, arg.Description, arg.AuthorID)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorID,
	)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT id, title, description, created_at, updated_at, author_id
FROM courses
ORDER BY created_at DESC
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.query(ctx, q.listCoursesStmt, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
